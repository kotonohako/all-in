// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package sqlc

import (
	"context"
)

const getQuote = `-- name: GetQuote :one
SELECT id, sentence, speaker_name, quote_source_name, quote_media_type, updated_at FROM quote WHERE id = ?
`

func (q *Queries) GetQuote(ctx context.Context, id int64) (Quote, error) {
	row := q.db.QueryRowContext(ctx, getQuote, id)
	var i Quote
	err := row.Scan(
		&i.ID,
		&i.Sentence,
		&i.SpeakerName,
		&i.QuoteSourceName,
		&i.QuoteMediaType,
		&i.UpdatedAt,
	)
	return i, err
}

const listQuotes = `-- name: ListQuotes :many
SELECT id, sentence, speaker_name, quote_source_name, quote_media_type, updated_at FROM quote
`

func (q *Queries) ListQuotes(ctx context.Context) ([]Quote, error) {
	rows, err := q.db.QueryContext(ctx, listQuotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quote
	for rows.Next() {
		var i Quote
		if err := rows.Scan(
			&i.ID,
			&i.Sentence,
			&i.SpeakerName,
			&i.QuoteSourceName,
			&i.QuoteMediaType,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
