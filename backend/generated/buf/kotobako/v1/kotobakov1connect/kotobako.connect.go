// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kotobako/v1/kotobako.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH
package kotobakov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kotonohako/all-in/backend/generated/buf/kotobako/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KotobakoServiceName is the fully-qualified name of the KotobakoService service.
	KotobakoServiceName = "kotobako.v1.KotobakoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KotobakoServiceHealthProcedure is the fully-qualified name of the KotobakoService's Health RPC.
	KotobakoServiceHealthProcedure = "/kotobako.v1.KotobakoService/Health"
	// KotobakoServiceListQuotesProcedure is the fully-qualified name of the KotobakoService's
	// ListQuotes RPC.
	KotobakoServiceListQuotesProcedure = "/kotobako.v1.KotobakoService/ListQuotes"
	// KotobakoServiceGetQuoteProcedure is the fully-qualified name of the KotobakoService's GetQuote
	// RPC.
	KotobakoServiceGetQuoteProcedure = "/kotobako.v1.KotobakoService/GetQuote"
	// KotobakoServicePostQuoteProcedure is the fully-qualified name of the KotobakoService's PostQuote
	// RPC.
	KotobakoServicePostQuoteProcedure = "/kotobako.v1.KotobakoService/PostQuote"
)

// KotobakoServiceClient is a client for the kotobako.v1.KotobakoService service.
type KotobakoServiceClient interface {
	Health(context.Context, *connect_go.Request[v1.HealthRequest]) (*connect_go.Response[v1.HealthResponse], error)
	ListQuotes(context.Context, *connect_go.Request[v1.ListQuotesRequest]) (*connect_go.Response[v1.ListQuotesResponse], error)
	GetQuote(context.Context, *connect_go.Request[v1.GetQuoteRequest]) (*connect_go.Response[v1.GetQuoteResponse], error)
	PostQuote(context.Context, *connect_go.Request[v1.PostQuoteRequest]) (*connect_go.Response[v1.PostQuoteResponse], error)
}

// NewKotobakoServiceClient constructs a client for the kotobako.v1.KotobakoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKotobakoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KotobakoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kotobakoServiceClient{
		health: connect_go.NewClient[v1.HealthRequest, v1.HealthResponse](
			httpClient,
			baseURL+KotobakoServiceHealthProcedure,
			opts...,
		),
		listQuotes: connect_go.NewClient[v1.ListQuotesRequest, v1.ListQuotesResponse](
			httpClient,
			baseURL+KotobakoServiceListQuotesProcedure,
			opts...,
		),
		getQuote: connect_go.NewClient[v1.GetQuoteRequest, v1.GetQuoteResponse](
			httpClient,
			baseURL+KotobakoServiceGetQuoteProcedure,
			opts...,
		),
		postQuote: connect_go.NewClient[v1.PostQuoteRequest, v1.PostQuoteResponse](
			httpClient,
			baseURL+KotobakoServicePostQuoteProcedure,
			opts...,
		),
	}
}

// kotobakoServiceClient implements KotobakoServiceClient.
type kotobakoServiceClient struct {
	health     *connect_go.Client[v1.HealthRequest, v1.HealthResponse]
	listQuotes *connect_go.Client[v1.ListQuotesRequest, v1.ListQuotesResponse]
	getQuote   *connect_go.Client[v1.GetQuoteRequest, v1.GetQuoteResponse]
	postQuote  *connect_go.Client[v1.PostQuoteRequest, v1.PostQuoteResponse]
}

// Health calls kotobako.v1.KotobakoService.Health.
func (c *kotobakoServiceClient) Health(ctx context.Context, req *connect_go.Request[v1.HealthRequest]) (*connect_go.Response[v1.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// ListQuotes calls kotobako.v1.KotobakoService.ListQuotes.
func (c *kotobakoServiceClient) ListQuotes(ctx context.Context, req *connect_go.Request[v1.ListQuotesRequest]) (*connect_go.Response[v1.ListQuotesResponse], error) {
	return c.listQuotes.CallUnary(ctx, req)
}

// GetQuote calls kotobako.v1.KotobakoService.GetQuote.
func (c *kotobakoServiceClient) GetQuote(ctx context.Context, req *connect_go.Request[v1.GetQuoteRequest]) (*connect_go.Response[v1.GetQuoteResponse], error) {
	return c.getQuote.CallUnary(ctx, req)
}

// PostQuote calls kotobako.v1.KotobakoService.PostQuote.
func (c *kotobakoServiceClient) PostQuote(ctx context.Context, req *connect_go.Request[v1.PostQuoteRequest]) (*connect_go.Response[v1.PostQuoteResponse], error) {
	return c.postQuote.CallUnary(ctx, req)
}

// KotobakoServiceHandler is an implementation of the kotobako.v1.KotobakoService service.
type KotobakoServiceHandler interface {
	Health(context.Context, *connect_go.Request[v1.HealthRequest]) (*connect_go.Response[v1.HealthResponse], error)
	ListQuotes(context.Context, *connect_go.Request[v1.ListQuotesRequest]) (*connect_go.Response[v1.ListQuotesResponse], error)
	GetQuote(context.Context, *connect_go.Request[v1.GetQuoteRequest]) (*connect_go.Response[v1.GetQuoteResponse], error)
	PostQuote(context.Context, *connect_go.Request[v1.PostQuoteRequest]) (*connect_go.Response[v1.PostQuoteResponse], error)
}

// NewKotobakoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKotobakoServiceHandler(svc KotobakoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	kotobakoServiceHealthHandler := connect_go.NewUnaryHandler(
		KotobakoServiceHealthProcedure,
		svc.Health,
		opts...,
	)
	kotobakoServiceListQuotesHandler := connect_go.NewUnaryHandler(
		KotobakoServiceListQuotesProcedure,
		svc.ListQuotes,
		opts...,
	)
	kotobakoServiceGetQuoteHandler := connect_go.NewUnaryHandler(
		KotobakoServiceGetQuoteProcedure,
		svc.GetQuote,
		opts...,
	)
	kotobakoServicePostQuoteHandler := connect_go.NewUnaryHandler(
		KotobakoServicePostQuoteProcedure,
		svc.PostQuote,
		opts...,
	)
	return "/kotobako.v1.KotobakoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KotobakoServiceHealthProcedure:
			kotobakoServiceHealthHandler.ServeHTTP(w, r)
		case KotobakoServiceListQuotesProcedure:
			kotobakoServiceListQuotesHandler.ServeHTTP(w, r)
		case KotobakoServiceGetQuoteProcedure:
			kotobakoServiceGetQuoteHandler.ServeHTTP(w, r)
		case KotobakoServicePostQuoteProcedure:
			kotobakoServicePostQuoteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKotobakoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKotobakoServiceHandler struct{}

func (UnimplementedKotobakoServiceHandler) Health(context.Context, *connect_go.Request[v1.HealthRequest]) (*connect_go.Response[v1.HealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kotobako.v1.KotobakoService.Health is not implemented"))
}

func (UnimplementedKotobakoServiceHandler) ListQuotes(context.Context, *connect_go.Request[v1.ListQuotesRequest]) (*connect_go.Response[v1.ListQuotesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kotobako.v1.KotobakoService.ListQuotes is not implemented"))
}

func (UnimplementedKotobakoServiceHandler) GetQuote(context.Context, *connect_go.Request[v1.GetQuoteRequest]) (*connect_go.Response[v1.GetQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kotobako.v1.KotobakoService.GetQuote is not implemented"))
}

func (UnimplementedKotobakoServiceHandler) PostQuote(context.Context, *connect_go.Request[v1.PostQuoteRequest]) (*connect_go.Response[v1.PostQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kotobako.v1.KotobakoService.PostQuote is not implemented"))
}
