/* tslint:disable */
/* eslint-disable */
/**
 * kotobako Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { QuoteResponse } from '../model';
/**
 * QuotesApi - axios parameter creator
 * @export
 */
export const QuotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary セリフ詳細 API
         * @param {number} quoteId セリフに紐づくID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteDetail: async (quoteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('quoteDetail', 'quoteId', quoteId)
            const localVarPath = `/v1/quotes/{quoteId}`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary セリフ一覧 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuotesApi - functional programming interface
 * @export
 */
export const QuotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary セリフ詳細 API
         * @param {number} quoteId セリフに紐づくID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteDetail(quoteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteDetail(quoteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary セリフ一覧 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuotesApi - factory interface
 * @export
 */
export const QuotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuotesApiFp(configuration)
    return {
        /**
         * 
         * @summary セリフ詳細 API
         * @param {number} quoteId セリフに紐づくID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteDetail(quoteId: number, options?: any): AxiosPromise<QuoteResponse> {
            return localVarFp.quoteDetail(quoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary セリフ一覧 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteList(options?: any): AxiosPromise<Array<QuoteResponse>> {
            return localVarFp.quoteList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuotesApi - object-oriented interface
 * @export
 * @class QuotesApi
 * @extends {BaseAPI}
 */
export class QuotesApi extends BaseAPI {
    /**
     * 
     * @summary セリフ詳細 API
     * @param {number} quoteId セリフに紐づくID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public quoteDetail(quoteId: number, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).quoteDetail(quoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary セリフ一覧 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public quoteList(options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).quoteList(options).then((request) => request(this.axios, this.basePath));
    }
}
